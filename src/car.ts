interface IEngine extends ICarSystem {
    start(): void;
    stop(): void;
}

interface IWheels extends ICarSystem {
    rotate(): void;
    brake(): void;
}

interface ILights extends ICarSystem {
    turnOn(): void;
    turnOff(): void;
}

interface ICar {
    engine: IEngine;
    wheels: IWheels;
    lights: ILights;
    displayInfo(): void;
}

interface ICarSystem {
    getStatus(): string;
}

class CarSystem implements ICarSystem {
    protected car: ICar;
    protected isActive: boolean = false;

    constructor(car: ICar) {
        this.car = car;
    }

    getStatusInternal(activeMessage: string, inactiveMessage: string): string {
        return this.isActive ? activeMessage : inactiveMessage;
    }

    getStatus(): string {
        return this.isActive ? "–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞." : "–°–∏—Å—Ç–µ–º–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.";
    }
}

class BasicEngine extends CarSystem implements IEngine {
    constructor(car: ICar) {
        super(car);
    }

    start(): void {
        this.isActive = true;
        console.log("%c‚ñ∂Ô∏è –î–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–ø—É—â–µ–Ω.", "color: green;");
    }

    stop(): void {
        this.isActive = false;
        console.log("%c‚è∏ –î–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–≥–ª—É—à–µ–Ω.", "color: red;");
    }

    getStatus(): string {
        return super.getStatusInternal("–î–≤–∏–≥–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω.", "–î–≤–∏–≥–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.");
    }
}

class BasicWheels extends CarSystem implements IWheels {
    constructor(car: ICar) {
        super(car);
    }

    rotate(): void {
        this.isActive = true;
        console.log("%c‚ñ∂Ô∏è –ö–æ–ª—ë—Å–∞ –Ω–∞—á–∞–ª–∏ –≤—Ä–∞—â–∞—Ç—å—Å—è.", "color: green;");
    }

    brake(): void {
        this.isActive = false;
        console.log("%c‚è∏ –ö–æ–ª—ë—Å–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.", "color: red;");
    }

    getStatus(): string {
        return super.getStatusInternal("–ö–æ–ª—ë—Å–∞ –≤—Ä–∞—â–∞—é—Ç—Å—è.", "–ö–æ–ª—ë—Å–∞ –Ω–µ –≤—Ä–∞—â–∞—é—Ç—Å—è.");
    }
}

class BasicLights extends CarSystem implements ILights {
    constructor(car: ICar) {
        super(car);
    }

    turnOn(): void {
        this.isActive = true;
        console.log("%c‚ñ∂Ô∏è –§–∞—Ä—ã –≤–∫–ª—é—á–µ–Ω—ã.", "color: green;");
    }

    turnOff(): void {
        this.isActive = false;
        console.log("%c‚è∏ –§–∞—Ä—ã –≤—ã–∫–ª—é—á–µ–Ω—ã.", "color: red;");
    }

    getStatus(): string {
        return super.getStatusInternal("–§–∞—Ä—ã –≥–æ—Ä—è—Ç.", "–§–∞—Ä—ã –Ω–µ –≥–æ—Ä—è—Ç.");
    }
}

class Car implements ICar {
    engine: IEngine;
    wheels: IWheels;
    lights: ILights;

    constructor() {
        this.engine = new BasicEngine(this);
        this.wheels = new BasicWheels(this);
        this.lights = new BasicLights(this);
    }

    displayInfo(): void {
        const statuses = [
            this.engine.getStatus(),
            this.wheels.getStatus(),
            this.lights.getStatus()
        ].join('\n');
        console.log(`\nüöó –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n${statuses}\n---\n`);
    }
}

export { Car };